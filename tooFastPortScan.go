package main

import (
        "fmt"
        "net"
        "sync"
)

func main() {
        var wg sync.WaitGroup           //creating a waitGroup or a synchronized counter
        for i := 1; i <= 1024; i++ {
                wg.Add(1)               //incrementing the counter for each goroutine scan
                go func(j int) {                //j will take value of i from below             //this is a goroutine
                        defer wg.Done() //defer is executed once logical flow exits out of current code block i.e the go routine block
                        address := fmt.Sprintf("scanme.nmap.org:%d", j)
                        conn, err := net.Dial("tcp", address)
                        if err != nil {
                                return
                        }
                        conn.Close()
                        fmt.Printf("%d open\n", j)
                }(i)    //passing value of i to j
        }
        wg.Wait()       //wait till the synchronized counter returns to zero
}
    
